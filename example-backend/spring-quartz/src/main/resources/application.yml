server:
  port: 20021
  servlet:
    context-path: /api


#用户自定义字段表数据源配置
Spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.2.200:3306/tb_design?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false
    username: root
    password: root2021
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      initialSize: 5
      minIdle: 5
      maxActive: 30
      max-wait: 6000
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      #validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        #login-username: admin
        #login-password: admin
      filter:
        stat:
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: false
        wall:
          config:
            multi-statement-allow: true

  quartz:
    # 将任务持久化到数据库
    job-store-type: jdbc
    # 程序结束时会等待quartz相关的内容结束
    wait-for-jobs-to-complete-on-shutdown: true
    # QuartzScheduler启动时更新己存在的Job,不用每次修改targetObject后删除qrtz_job_details表对应记录
    overwrite-existing-jobs: true
    # 注意这个地方的格式
    properties:
      org:
        quartz:
          # scheduler相关
          scheduler:
            # scheduler的实例名  @Autowired注入
            instanceName: scheduler
            instanceId: AUTO
          # 持久化相关
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            # 表示数据库中相关表是QRTZ_开头的
            tablePrefix: QRTZ_
            # 不使用properties加载 使用yml配置
            useProperties: false
          # 线程池相关
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            # 线程数
            threadCount: 10
            # 线程优先级
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true

#    job-store-type: memory                             #所有任务相关内容存储在内存中
#    scheduler-name: AnchorScheduler
#    properties:
#      org.quartz.scheduler.instanceId: 1122334         #集群中会用到，单节点无用，不填、填AUTO都可以
#      org.quartz.scheduler.rmi.export: false
#      org.quartz.scheduler.rmi.proxy: false
#      org.quartz.scheduler.wrapJobExecutionInUserTransaction: false
#      org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
#      org.quartz.threadPool.threadCount: 9             #线程数
#      org.quartz.threadPool.threadPriority: 5          #线程优先级
#      org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true
#      org.quartz.jobStore.misfireThreshold: 60000      #作业最大延迟时间，毫秒
#      org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore    #内存作业时负责跟踪调度所有工作数据

#    #数据库方式
#    job-store-type: jdbc
#    #是否等待任务执行完毕后，容器才会关闭
#    wait-for-jobs-to-complete-on-shutdown: false
#    #配置的job是否覆盖已经存在的JOB信息
#    overwrite-existing-jobs: false
#    jdbc:
#      initialize-schema: always #每次都生成表结构
##      initialize-schema: NEVER #不初始化数据源
#    properties:
#      org:
#        quartz:
#          scheduler:
#            #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段
#            instanceId: AUTO
#          jobStore:
#            class: org.quartz.impl.jdbcjobstore.JobStoreTX #持久化配置
#            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate #我们仅为数据库制作了特定于数据库的代理
#            useProperties: false #以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。
#            tablePrefix: qrtz_  #数据库表前缀
#            misfireThreshold: 60000 #在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。
#            clusterCheckinInterval: 5000 #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
#            isClustered: true #打开群集功能
#            threadPool: #连接池
#              class: org.quartz.simpl.SimpleThreadPool
#              threadCount: 10
#              threadPriority: 5
#              threadsInheritContextClassLoaderOfInitializingThread: true

#logging:
#  level:
#    root: debug
